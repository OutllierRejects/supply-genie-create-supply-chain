"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UvUtils = void 0;
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const path_1 = require("path");
class UvUtils {
    /**
     * Check if uv is available in the system
     */
    static isUvAvailable() {
        try {
            const result = (0, child_process_1.spawnSync)("uv", ["--version"], { stdio: "pipe" });
            return result.status === 0;
        }
        catch {
            return false;
        }
    }
    /**
     * Get uv version information
     */
    static getUvVersion() {
        try {
            const result = (0, child_process_1.spawnSync)("uv", ["--version"], {
                stdio: "pipe",
                encoding: "utf8",
            });
            if (result.status === 0 && result.stdout) {
                return result.stdout.trim();
            }
        }
        catch {
            // Ignore errors
        }
        return null;
    }
    /**
     * Build uv command based on configuration
     */
    static buildCommand(config) {
        const baseCmd = ["uv", "pip"];
        if (config.mode === "freeze") {
            baseCmd.push("freeze");
            if (config.freezeOptions.length > 0) {
                baseCmd.push(...config.freezeOptions);
            }
        }
        else {
            baseCmd.push("compile");
            baseCmd.push(config.source);
            baseCmd.push("-o", config.output);
            if (config.pythonVersion) {
                baseCmd.push("--python-version", config.pythonVersion);
            }
            config.extraIndexUrl.forEach((url) => {
                baseCmd.push("--extra-index-url", url);
            });
            config.trustedHost.forEach((host) => {
                baseCmd.push("--trusted-host", host);
            });
            if (config.compileOptions.length > 0) {
                baseCmd.push(...config.compileOptions);
            }
        }
        if (config.verbose) {
            baseCmd.push("--verbose");
        }
        return baseCmd;
    }
    /**
     * Execute uv command
     */
    static executeCommand(command, cwd, verbose = false) {
        const [cmd, ...args] = command;
        if (verbose) {
            console.log(`[uv] Executing: ${command.join(" ")}`);
            console.log(`[uv] Working directory: ${cwd}`);
        }
        return (0, child_process_1.spawnSync)(cmd, args, {
            cwd,
            stdio: verbose ? "inherit" : "pipe",
            encoding: "utf8",
            shell: process.platform === "win32",
        });
    }
    /**
     * Validate configuration
     */
    static validateConfig(config, cwd) {
        if (config.mode === "compile") {
            const sourcePath = (0, path_1.join)(cwd, config.source || "pyproject.toml");
            if (!(0, fs_1.existsSync)(sourcePath)) {
                throw new Error(`Source file not found: ${sourcePath}. ` +
                    `Create a pyproject.toml file or set custom.uv.source to an existing file.`);
            }
        }
    }
    /**
     * Get default configuration with all required fields
     */
    static getDefaultConfig() {
        return {
            mode: "compile",
            source: "pyproject.toml",
            output: "requirements.txt",
            cwd: process.cwd(),
            compileOptions: [],
            freezeOptions: [],
            skipIfMissing: false,
            pythonVersion: "",
            extraIndexUrl: [],
            trustedHost: [],
            verbose: false,
        };
    }
    /**
     * Merge user config with defaults
     */
    static mergeConfig(userConfig = {}) {
        const defaults = this.getDefaultConfig();
        return {
            ...defaults,
            ...userConfig,
            compileOptions: userConfig.compileOptions || defaults.compileOptions,
            freezeOptions: userConfig.freezeOptions || defaults.freezeOptions,
            extraIndexUrl: userConfig.extraIndexUrl || defaults.extraIndexUrl,
            trustedHost: userConfig.trustedHost || defaults.trustedHost,
        };
    }
}
exports.UvUtils = UvUtils;
//# sourceMappingURL=utils.js.map